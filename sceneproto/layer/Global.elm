module SceneProtos.$0.$1.Global exposing (getLayerT)

{-| Global Module

Generated by Messenger, don't modify this.

@docs getLayerT

-}

import Canvas exposing (Renderable)
import Lib.Layer.Base exposing (Layer, LayerMsg, LayerTarget)
import Messenger.GeneralModel exposing (GeneralModel)
import SceneProtos.$0.$1.Common exposing (EnvC, nullModel)
import SceneProtos.$0.$1.Export exposing (Data)
import SceneProtos.$0.LayerBase exposing (CommonData)
import SceneProtos.$0.LayerSettings exposing (LayerDataType(..), LayerT)


{-| dataToLDT
-}
dataToLDT : Data -> LayerDataType
dataToLDT data =
    $1Data data


{-| ldtToData
-}
ldtToData : LayerDataType -> Data
ldtToData ldt =
    case ldt of
        $1Data x ->
            x

        _ ->
            nullModel


{-| getLayerT
-}
getLayerT : Layer Data CommonData -> LayerT
getLayerT layer =
    let
        update : EnvC -> LayerDataType -> ( LayerDataType, List ( LayerTarget, LayerMsg ), EnvC )
        update env ldt =
            let
                ( rldt, newmsg, newenv ) =
                    layer.update env (ldtToData ldt)
            in
            ( dataToLDT rldt, newmsg, newenv )

        updaterec : EnvC -> LayerMsg -> LayerDataType -> ( LayerDataType, List ( LayerTarget, LayerMsg ), EnvC )
        updaterec env lm ldt =
            let
                ( rldt, newmsg, newenv ) =
                    layer.updaterec env lm (ldtToData ldt)
            in
            ( dataToLDT rldt, newmsg, newenv )

        view : EnvC -> LayerDataType -> Renderable
        view env ldt =
            layer.view env (ldtToData ldt)
    in
    GeneralModel layer.name (dataToLDT layer.data) update updaterec view
