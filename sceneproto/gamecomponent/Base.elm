module SceneProtos.$0.GameComponent.Base exposing
    ( GameComponent, GameComponentTarget(..)
    , GameComponentMsg(..)
    , GameComponentTypes(..)
    , Data, nullData
    )

{-|


# GameComponent

This is generated by Mesenger.

@docs GameComponent, GameComponentTarget
@docs GameComponentMsg
@docs GameComponentTypes
@docs Data, nullData
@docs GameComponentInitData

-}

import Base exposing (ObjectTarget)
import Canvas exposing (Renderable)
import Dict exposing (Dict)
import Lib.DefinedTypes.DefTypes exposing (DefinedTypes(..))
import Lib.Env.Env exposing (Env)
import Messenger.GeneralModel exposing (GeneralModel)
import SceneProtos.$0.LayerBase exposing (CommonData)



--- GameComponent Base


{-| DatawithID

some `gamecomponent` data with uid.

-}
type alias DatawithID data =
    { uid : Int
    , otherdata : data
    }


{-| addID

add a uid for some `gamecomponent` data.

-}
addID : Int -> data -> DatawithID data
addID id data =
    { uid = id
    , otherdata = data
    }


{-| GameComponent Definition
-}
type alias GameComponent a =
    GeneralModel (DatawithID a) (Env CommonData) GameComponentMsg GameComponentTarget (List ( Renderable, Int ))


{-| GameComponent Target
-}
type GameComponentTarget
    = GameComponent ObjectTarget


{-| Messages for GameComponent
-}
type GameComponentMsg
    = NullGCMsg


{-| GC init data, don't modify this by hand!
-}
type GameComponentInitData
    = GCIdData Int GameComponentInitData
    | NullGCInitData
